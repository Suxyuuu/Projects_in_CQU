import os
import re

def cut(obj, sec):
    return [obj[i:i+sec] for i in range(0,len(obj),sec)]


def get_all_path(open_file_path):
    root_dir = open_file_path
    path_list = []
    l_list = os.listdir(root_dir)  # 列出文件夹下所有的目录与文件
    for i in range(0, len(l_list)):
        com_path = os.path.join(root_dir, l_list[i])
        #print(com_path)
        if os.path.isfile(com_path):
            path_list.append(com_path)
        if os.path.isdir(com_path):
            path_list.extend(get_all_path(com_path))
    print(path_list)
    return path_list


def get_smali_file(sm_target_path, file_path):
    file_list = os.listdir(file_path)
    # instruction divided into groups
    op_simplify = ['C', 'D', 'M', 'R', 'L', 'G', 'I', 'T', 'P', 'V']
    op_select_word = ['cmp', 'const', 'move', 'return', 'monitor', 'goto', 'if',
                      'aget|iget|sget', 'aput|iput|sput', 'invoke']
    # circle the single apk
    flag = 0
    count = 0
    for apk_name in file_list:
        wait = 0
        print("序号: %i %s" % (flag , apk_name))
        flag += 1
        check_list = os.listdir(sm_target_path)
        if apk_name+'.txt' in check_list:
            print("文件已被处理")
            continue
        else:
            apk_path = os.listdir(file_path+'\\'+apk_name)
            # find the smali file folder
            for sub_apk_name in apk_path:
                r = re.compile('smali')
                if r.match(sub_apk_name):
                    op_file = open(sm_target_path + '\\' + apk_name + '.txt', 'a')
                    apk_sub_path = file_path+'\\'+apk_name+'\\'+sub_apk_name
                    # find all the smali files
                    for root, dirs, files in os.walk(apk_sub_path):
                        for file in files:
                            # the single smali file
                            target_file = os.path.join(root, file)
                            try:
                                smali_file = open(target_file, 'r', encoding='UTF-8')
                                smali_file_content = smali_file.read()
                            except BaseException as e:
                                print(e)
                                print(target_file)
                                pass
                                continue
                            # the single method in the file
                            r = re.compile(r'\.method(.*?)\.end method', re.DOTALL|re.M)
                            instruction_list = r.findall(smali_file_content)
                            # circle the method
                            for line in instruction_list:
                                line_list = line.split('\n')
                                # circle the single line
                                for j in range(1, len(line_list)):
                                    for i in range(0, len(op_select_word)):
                                        if re.search(op_select_word[i], line_list[j]):
                                            if i == 7 or i == 8:
                                                if re.search('offset', line_list[j]):
                                                    continue
                                            count += 1
                                            op_file.write(op_simplify[i])
                                if count != 0:
                                    op_file.write('\n')
                                    count = 0
                            smali_file.close()
                    op_file.close()
                else:
                    wait += 1
                    if wait == len(apk_path):
                        print("反编译失败,无smali文件")
            print("获取指令完成")


def gram_get(file_path, file_another_path, x_value, n_value):
    combination = ""
    combination_list = []
    op_simplify = ['C', 'D', 'M', 'R', 'L', 'G', 'I', 'T', 'P', 'V']
    if x_value == 3:
        for i in range(0, len(op_simplify)):
            for j in range(0, len(op_simplify)):
                for k in range(0, len(op_simplify)):
                    combination = op_simplify[i] + op_simplify[j] + op_simplify[k]
                    combination_list.append(combination)
    elif x_value == 2:
        for i in range(0, len(op_simplify)):
            for j in range(0, len(op_simplify)):
                combination = op_simplify[i] + op_simplify[j]
                combination_list.append(combination)
    if n_value == 1:
        combination_list = delete_instruction(file_path, file_another_path, x_value)
        # for i in range(0, len(flag_list)):
        #     if flag_list[i] == 0:
        #         del combination_list[i]
    return combination_list


def calculate_combination(file_path, file_one_path, file_two_path, gram_n, flag_n, possible_file_path):
    op_simplify = ['C', 'D', 'M', 'R', 'L', 'G', 'I', 'T', 'P', 'V']
    combination = ""
    count = 0
    combination_list = gram_get(file_one_path, file_two_path, gram_n, flag_n)
    print(combination_list)
    if flag_n == 1:
        for file_name in os.listdir(file_one_path):
            count_list = []
            count += 1
            print("序号: %i %s" % (count, file_name))
            combination_count_list = [0] * len(combination_list)
            op_file = open(file_one_path + '\\' + file_name, 'r')
            write_op_file = open(possible_file_path+'\\'+file_name, 'a')
            for line in op_file:
                count_list.append(line)
            for i in range(0, len(combination_list)):
                if combination_list[i] != 0:
                    write_op_file.write(count_list[i])
            op_file.close()
            write_op_file.close()
            print("获取向量完成")
    else:
        for file_name in os.listdir(file_path):
            count += 1
            print("序号: %i %s" % (count, file_name))
            combination_count_list = [0] * len(combination_list)
            op_file = open(file_path+'\\'+file_name, 'r')
            for line in op_file:
                for word in cut(line, gram_n):
                    if word in combination_list:
                        combination_count_list[combination_list.index(word)] += 1
            op_file.close()
            write_op_file = open(possible_file_path+'\\'+file_name, 'a')
            total_sum = sum(combination_count_list)
            for item in combination_count_list:
                # write_op_file.write(str(("%.10f" % (item / total_sum)))+'\n')
                write_op_file.write(str(item) + '\n')
            write_op_file.close()
            print("获取向量完成")


def delete_instruction(good_dalvik_path, bad_dalvik_path, gram_n):
    use_list = [0]*pow(10, gram_n)
    for good_file in os.listdir(good_dalvik_path):
        count = 0
        dalvik_file = open(good_dalvik_path+'\\'+good_file, 'r')
        for line in dalvik_file:
            if int(line.strip('\n')) > 0 and use_list[count] == 0:
                use_list[count] = 1
            count +=1
        dalvik_file.close()
    for bad_file in os.listdir(bad_dalvik_path):
        count = 0
        dalvik_file = open(bad_dalvik_path + '\\' + bad_file, 'r')
        for line in dalvik_file:
            if int(line.strip('\n')) > 0 and use_list[count] == 0:
                use_list[count] = 1
            count += 1
        dalvik_file.close()
    return use_list


def normal_gua(smali_source_path, smali_average_path):
    for name in os.listdir(smali_source_path):
        file_list = []
        file_source = open(smali_source_path+'\\'+name, 'r')
        file_write = open(smali_average_path+'\\'+name, 'a')
        for line in file_source:
            file_list.append(int(line.strip('\n')))
        file_source.close()
        try:
            for i in range(0,len(file_list)):
                file_write.write(str(format((file_list[i]-sum(file_list)/len(file_list))/(max(file_list)-min(file_list)),
                                            '.6f')+'\n'))
        except BaseException as e:
            print(name)
            print(e)
        file_write.close()


def main():
    # the gram n
    n = 3
    flag_gram = 0
    # the destination folder to save the operation code file
    good_sm_target_file_path = r'D:\apk\byte\good_sample_dalvik'
    # the source folder created by apk tool
    good_sm_source_file_path = r'D:\apk\apktooltest\inv_good'

    bad_sm_target_file_path = r'D:\apk\byte\bad_sample_dalvik'
    bad_sm_source_file_path = r'D:\apk\apktooltest\inv_bad'
    # step1 获取简化后的字节码序列
    #get_smali_file(good_sm_target_file_path, good_sm_source_file_path)
    get_smali_file(bad_sm_target_file_path, bad_sm_source_file_path)

    # the destination folder to save the possibility vector file
    good_sm_possible_file_path = r'D:\apk\byte\good_sample_dalvik_count_vector'
    bad_sm_possible_file_path = r'D:\apk\byte\bad_sample_dalvik_count_vector'
    # step2 获取计算好的计数向量
    #calculate_combination(good_sm_target_file_path, bad_sm_target_file_path, n, flag_gram, good_sm_possible_file_path)
    calculate_combination(bad_sm_target_file_path, bad_sm_possible_file_path, good_sm_possible_file_path,
                        n, flag_gram, bad_sm_possible_file_path)
    # # step3 删除全为0的向量维度
    # good_delete_path = r'C:\Users\Bluedask\Desktop\Android\dalvik\2_gram\good'
    # bad_delete_path = r'C:\Users\Bluedask\Desktop\Android\dalvik\2_gram\bad'
    # calculate_combination(good_sm_target_file_path, good_sm_possible_file_path, bad_sm_possible_file_path,
    #                       n, flag_gram, good_delete_path)
    # calculate_combination(bad_sm_target_file_path, bad_sm_possible_file_path, good_sm_possible_file_path,
    #                       n, flag_gram, bad_delete_path)

if __name__ == "__main__":
    main()

