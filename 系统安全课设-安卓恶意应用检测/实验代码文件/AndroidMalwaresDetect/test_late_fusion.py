import AndroidMalwaresDetect.DealwithData as DealwithData
import AndroidMalwaresDetect.GetTrainList as GetTrainList
import AndroidMalwaresDetect.TripleCombine as TripleCombine
import AndroidMalwaresDetect.Combine as Combine
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
import os
import numpy as np


def get_weight(good_vector_path,bad_vector_path):
    good_vector_list=DealwithData.getvectorfromfile(good_vector_path)
    bad_vector_list=DealwithData.getvectorfromfile(bad_vector_path)

    X=GetTrainList.get_x_train(good_vector_list,bad_vector_list)
    Y=GetTrainList.get_y_train(good_vector_list,bad_vector_list)
    X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3,random_state=0)#随机选择训练集和测试集

    clf =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf.fit(X_train,Y_train) 
    Y_pred = clf.predict(X_test)

    weight=metrics.accuracy_score(Y_test,Y_pred)
    return weight


def fusion(new_good_feature_list,new_bad_feature_list,permission_length,api_length,permission_weight,api_weight):
    X=GetTrainList.get_x_train(new_good_feature_list,new_bad_feature_list)
    Y=GetTrainList.get_y_train(new_good_feature_list,new_bad_feature_list)
    X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3,random_state=0)#随机选择训练集和测试集
    X_train_permission=[]
    X_train_api=[]
    for i in X_train:
        list1=[]
        list2=[]
        for j in range(permission_length):
            list1.append(i[j])
        for m in range(permission_length,len(i)):
            list2.append(i[m])
        X_train_permission.append(list1)
        X_train_api.append(list2)
    

    X_test_permission=[]
    X_test_api=[]
    for i in X_test:
        list1=[]
        list2=[]
        for j in range(permission_length):
            list1.append(i[j])
        for m in range(permission_length,len(i)):
            list2.append(i[m])
        X_test_permission.append(list1)
        X_test_api.append(list2)
    

    clf_permission =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf_permission.fit(X_train_permission,Y_train) 
    Y_pred_permission = clf_permission.predict(X_test_permission)

    clf_api =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf_api.fit(X_train_api,Y_train) 
    Y_pred_api = clf_api.predict(X_test_api)

    
    Y_pred=[]
    for i in range(len(Y_pred_permission)):
        a=(Y_pred_permission[i]*permission_weight+Y_pred_api[i]*api_weight)/2
        if a>0.5:
            Y_pred.append(1)
        else:
            Y_pred.append(0)
    
    print("分类正确率ACC：")
    print(metrics.accuracy_score(Y_test,Y_pred))
    acc=metrics.accuracy_score(Y_test,Y_pred)
    #print("混淆矩阵：")
    m=metrics.confusion_matrix(Y_test,Y_pred)
    #print(m)
    print("真正率TPR：")#预测为真实际为真
    print(metrics.recall_score(Y_test,Y_pred))
    print("真负率TNR：")#预测为假实际为假
    print(m[1][1]/(m[0][1]+m[1][1]))

    return acc


def tri_fusion(new_good_feature_list,new_bad_feature_list,permission_length,api_length,bytecode_length):
    X=GetTrainList.get_x_train(new_good_feature_list,new_bad_feature_list)
    Y=GetTrainList.get_y_train(new_good_feature_list,new_bad_feature_list)
    X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3,random_state=0)#随机选择训练集和测试集
    X_train_permission=[]
    X_train_api=[]
    X_train_bytecode=[]
    for i in X_train:
        list1=[]
        list2=[]
        list3=[]
        for j in range(permission_length):
            list1.append(i[j])
        for m in range(permission_length,permission_length+api_length):
            list2.append(i[m])
        for n in range(permission_length+api_length,len(i)):
            list3.append(i[n])
        X_train_permission.append(list1)
        X_train_api.append(list2)
        X_train_bytecode.append(list3)
    

    X_test_permission=[]
    X_test_api=[]
    X_test_bytecode=[]
    for i in X_test:
        list1=[]
        list2=[]
        list3=[]
        for j in range(permission_length):
            list1.append(i[j])
        for m in range(permission_length,permission_length+api_length):
            list2.append(i[m])
        for n in range(permission_length+api_length,len(i)):
            list3.append(i[n])
        X_test_permission.append(list1)
        X_test_api.append(list2)
        X_test_bytecode.append(list3)
    

    clf_permission =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf_permission.fit(X_train_permission,Y_train) 
    Y_pred_permission = clf_permission.predict(X_test_permission)

    clf_api =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf_api.fit(X_train_api,Y_train) 
    Y_pred_api = clf_api.predict(X_test_api)

    clf_bytecode =  RandomForestClassifier(n_estimators=180, max_depth=None,min_samples_split=2, random_state=None)
    clf_bytecode.fit(X_train_bytecode,Y_train) 
    Y_pred_bytecode = clf_bytecode.predict(X_test_bytecode)

    Y_pred=[]
    
    '''
    for i in range(len(Y_pred_permission)):
        a=(Y_pred_permission[i]*permission_weight + Y_pred_api[i]*api_weight + Y_pred_bytecode[i]*bytecode_weight)/3
        if a>0.5:
            Y_pred.append(1)
        else:
            Y_pred.append(0)
    '''
    for i in range(len(Y_pred_permission)):
        flag=0
        if(Y_pred_permission[i]==1):
            flag+=1
        if(Y_pred_api[i]==1):
            flag+=1
        if(Y_pred_bytecode[i]==1):
            flag+=1
        if flag>=2:
            Y_pred.append(1)
        else:
            Y_pred.append(0)
    
    print("分类正确率ACC：")
    print(metrics.accuracy_score(Y_test,Y_pred))
    acc=metrics.accuracy_score(Y_test,Y_pred)
    #print("混淆矩阵：")
    m=metrics.confusion_matrix(Y_test,Y_pred)
    #print(m)
    print("真正率TPR：")#预测为真实际为真
    print(metrics.recall_score(Y_test,Y_pred))
    print("真负率TNR：")#预测为假实际为假
    print(m[1][1]/(m[0][1]+m[1][1]))

    return acc



def main():
    
    good_vector_path_permission=r'D:\apk\features\permission\trainandtest_good_permission'
    bad_vector_path_permission=r'D:\apk\features\permission\trainandtest_bad_permission'
    
    good_vector_path_api=r'D:\apk\features\api\good'
    bad_vector_path_api=r'D:\apk\features\api\bad'

    good_vector_path_bytecode=r'D:\apk\features\byte\good_sample_dalvik_count_vector'
    bad_vector_path_bytecode=r'D:\apk\features\byte\bad_sample_dalvik_count_vector'

    good_vector_path_bytecode_avg=r'D:\apk\features\byte\good_sample_dalvik_count_average_normalGua'
    bad_vector_path_bytecode_avg=r'D:\apk\features\byte\bad_sample_dalvik_count_average_normalGua'

    '''
    permission_weight=get_weight(good_vector_path_permission,bad_vector_path_permission)
    api_weight=get_weight(good_vector_path_api,bad_vector_path_api)
    bytecode_weight=get_weight(good_vector_path_bytecode,bad_vector_path_bytecode)
    '''

    good_vector_list_1=DealwithData.getvectorfromfile(good_vector_path_permission)
    good_file_list_1=os.listdir(good_vector_path_permission)
    bad_vector_list_1=DealwithData.getvectorfromfile(bad_vector_path_permission)
    bad_file_list_1=os.listdir(bad_vector_path_permission)

    permission_length=len(good_vector_list_1[0])

    good_vector_list_2=DealwithData.getvectorfromfile(good_vector_path_api)
    good_file_list_2=os.listdir(good_vector_path_api)
    bad_vector_list_2=DealwithData.getvectorfromfile(bad_vector_path_api)
    bad_file_list_2=os.listdir(bad_vector_path_api)

    api_length=len(good_vector_list_2[0])

    good_vector_list_3=DealwithData.getvectorfromfile(good_vector_path_bytecode)
    good_file_list_3=os.listdir(good_vector_path_bytecode)
    bad_vector_list_3=DealwithData.getvectorfromfile(bad_vector_path_bytecode)
    bad_file_list_3=os.listdir(bad_vector_path_bytecode)

    bytecode_length=len(good_vector_list_3[0])

    good_vector_list_4=DealwithData.getvectorfromfile(good_vector_path_bytecode_avg)
    good_file_list_4=os.listdir(good_vector_path_bytecode_avg)
    bad_vector_list_4=DealwithData.getvectorfromfile(bad_vector_path_bytecode_avg)
    bad_file_list_4=os.listdir(bad_vector_path_bytecode_avg)

    bytecode_length_avg=len(good_vector_list_4[0])

    '''
    #permission and api
    
    new_good_feature_list1,new_bad_feature_list1=Combine.combine(good_vector_list_1,good_file_list_1,bad_vector_list_1,bad_file_list_1,
                                                                good_vector_list_2,good_file_list_2,bad_vector_list_2,bad_file_list_2)
    
    fusion(new_good_feature_list1,new_bad_feature_list1,permission_length,api_length,permission_weight,api_weight)

    #permission and bytecode
    new_good_feature_list2,new_bad_feature_list2=Combine.combine(good_vector_list_1,good_file_list_1,bad_vector_list_1,bad_file_list_1,
                                                                good_vector_list_3,good_file_list_3,bad_vector_list_3,bad_file_list_3)
    
    fusion(new_good_feature_list2,new_bad_feature_list2,permission_length,bytecode_length,permission_weight,bytecode_weight)

    #api and bytecode
    new_good_feature_list3,new_bad_feature_list3=Combine.combine(good_vector_list_3,good_file_list_3,bad_vector_list_3,bad_file_list_3,
                                                                good_vector_list_2,good_file_list_2,bad_vector_list_2,bad_file_list_2)
    
    fusion(new_good_feature_list3,new_bad_feature_list3,bytecode_length,api_length,bytecode_weight,api_weight)
    
    
    '''
    #permission and api and bytecode (未归一)
    new_good_feature_list4,new_bad_feature_list4=TripleCombine.double_combine(good_vector_list_1,good_file_list_1,bad_vector_list_1,bad_file_list_1,
                                                                            good_vector_list_2,good_file_list_2,bad_vector_list_2,bad_file_list_2,
                                                                            good_vector_list_3,good_file_list_3,bad_vector_list_3,bad_file_list_3)
    print("permission and api and bytecode (未归一)")
    for i in range(10):
        ACC=[]
        acc=tri_fusion(new_good_feature_list4,new_bad_feature_list4,
                        permission_length,api_length,bytecode_length)
        ACC.append(acc)
    print(np.mean(ACC))

    #permission and api and bytecode (归一)
    new_good_feature_list5,new_bad_feature_list5=TripleCombine.double_combine(good_vector_list_1,good_file_list_1,bad_vector_list_1,bad_file_list_1,
                                                                            good_vector_list_2,good_file_list_2,bad_vector_list_2,bad_file_list_2,
                                                                            good_vector_list_4,good_file_list_4,bad_vector_list_4,bad_file_list_4)
    print("permission and api and bytecode (归一)")
    for i in range(10):
        ACC=[]
        acc=tri_fusion(new_good_feature_list5,new_bad_feature_list5,
                        permission_length,api_length,bytecode_length_avg)
        ACC.append(acc)
    print(np.mean(ACC))
    

if __name__ == "__main__":
    main()